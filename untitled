#include "game_init.h"
#include "game_logic.h"

/*
 * Returns the first letter associated with the color of the token
 *
 * Input: t - pointer to a token
 * Output: initial of the color of the token
 */

char print_token(token *t){
    if(t -> col == PINK) return 'P';
    if(t ->col == RED) return 'R';
    if(t -> col == BLU) return 'B';
    if(t -> col == GREEN) return 'G';
    if(t -> col == ORANGE) return 'O';
    if(t -> col == YELLOW) return 'Y';
    return '\0';
}

/*
 * Prints the board
 *
 * Input: the board to be printed.
 */
void print_board(square board[NUM_ROWS][NUM_COLUMNS]){
    printf("                THE BOARD\n");
    for(int i =0; i < NUM_ROWS; i++){

        //prints an horizontal line
        printLine();
        //prints the row number
        printf(" %d ", i);
        char c = '\0' ;
        //if the square (i,j) is occupied,
        //c is assigned the initial of the color of the token that occupies the square
        for (int j = 0; j < NUM_COLUMNS; j++){
            if(board[i][j].stack != NULL){
                c = print_token(board[i][j].stack);
            }
            //if the square (i,j) is empty
            else{
                //c is assigned 'X' if the square represents an obstacle
                if(board[i][j].type == OBSTACLE)
                    c = 'X';
                //c is assigned an empty space otherwise
                else c = ' ';
            }
            printf("| %c ", c);
        }
        printf ("|\n");
    }
    printLine();
    //prints the number of the columns at the end of the board
    printf("     0   1   2   3   4   5   6   7   8\n");
}

/*
 * Prints a horizontal line of hyphen "-" characters
 * Input: void
 */
void printLine(void){
  printf("   -------------------------------------\n");
}

/*
 * Place tokens in the first column of the board
 *
 * Input: board - a 6x9 array of squares that represents the board
 *        players - the array of the players
 *        numPlayers - the number of players
 */
void place_tokens(square board[NUM_ROWS][NUM_COLUMNS], player players[], int numPlayers){
// the min number of tokens placed on a square in the first coloumn of the board
    int minNumOfTokens = 0;
    int selectedSquare = 0;

    for(int i=0; i <4; i++){

        for(int j=0; j <numPlayers; j++){

            print_board(board); // prints board

            printf("Player %d select a square.\n", j+1);
            scanf("%d", &selectedSquare); // user selects square in first coloumn

            if(selectedSquare > -1 && selectedSquare < 6){ // ensures player selects a square between 0 and 5

                if(board[selectedSquare][0].stack == NULL) // if selected square is empty
                {
                   board[selectedSquare][0].stack = (token *)malloc(sizeof(token)); // allocates memory
                   board[selectedSquare][0].stack->col = players[j].col;
                   board[selectedSquare][0].numTokens++;
                }
                else
                {
                    printf("This square is full.\nPlease select an empty square.\n"); // error messaage

                }

            }
            else{
                printf("\n\nPlease select a square between 0-5.\n"); // error message if user selects square outside of range
            }
          

            // to be implemented: if the square contains the min number of tokens and
            // does not have a token of the same colour of the player
               

            // updates the minimum number of Tokens
            if(((numPlayers * i) + j + 1)%NUM_ROWS ==0)
                minNumOfTokens++;

            //print_board(board); // prints board after each token is placed
        }        
    }



}


/*
 * Place tokens in the first column of the board
 *
 * Input: board - a 6x9 array of squares that represents the board
 *        players - the array of the players
 *        numPlayers - the number of players
 */

void play_game(square board[NUM_ROWS][NUM_COLUMNS], player players[], int numPlayers){
    //TO BE IMPLEMENTED
}

